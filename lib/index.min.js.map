{
  "version": 3,
  "sources": ["../src/index.ts", "../src/extend-lib.ts", "../src/utils.ts"],
  "sourcesContent": ["import { keyBindingArray } from \"./data-types\";\nimport { CONFIG, updateConfig, log } from './extend-lib';\nimport { formatBinding, formatKey } from \"./utils\";\n\nHTMLElement.prototype.addKeyBindings = function (keyBindings: keyBindingArray) {\n    this.pressed = new Set();\n    this.keyBindings = keyBindings;\n    keyBindings.seperator =\n        keyBindings.seperator != undefined ? keyBindings.seperator : \" + \";\n\n    this.checkKeyBinding = function (event) {\n        let pressedKeys = Array.from(this.pressed);\n        this.keyBindings.bindings.forEach((binding) => {\n            if (\n                pressedKeys.join(keyBindings.seperator).toLowerCase() ===\n                formatBinding(\n                    binding.keyBinding,\n                    keyBindings.seperator\n                ).toLowerCase()\n            ) {\n                binding.action.call(this, binding.keyBinding);\n            }\n        });\n    };\n\n    this.onkeyup = (event) => {\n        console.log(CONFIG);\n        this.pressed.delete(formatKey(event.key));\n        log('deleting key from storage', this.pressed);\n    };\n\n    this.onkeydown = (event) => {\n        this.pressed.add(formatKey(event.key));\n        this.checkKeyBinding(event);\n        log(event.key);\n        log('adding key to storage', this.pressed);\n    };\n    log(`bindings added for `, this);\n};\n\nHTMLElement.prototype.removeAllKeyBindings = function () {\n    log(this);\n    this.keyBindings.bindings = [];\n};\n\n// @ts-ignore\nmodule.exports = {\n    updateConfig\n}\n", "/*\n    This file contains the code \n*/\nimport { Configuration } from './data-types';\n\nexport const CONFIG: Configuration = {\n    \"mode\": \"development\"\n}\n\nexport function updateConfig(config: Configuration) {\n    for (let i in config) {\n        CONFIG[i] = config[i];\n    }\n    log('config update to', CONFIG);\n}\n\nexport const log = (...str) => {\n    if (CONFIG.mode === \"development\") {\n        console.log(...str);\n    }\n}", "/**\n * @param {String} keyBinding Keybinding to format\n * @param {String} splitter A piece of string which is used as the \"join string\".\n * @description Formats a keyBinding\n */\nexport function formatBinding(keyBinding: string, splitter: string): string {\n    return keyBinding\n        .split(splitter)\n        .map((word) => {\n            let newWord = word;\n            if (word.toLowerCase() == \"ctrl\") {\n                newWord = \"Control\";\n            }\n            if (word.toLowerCase() == \"shift\") {\n                newWord = \"Shift\";\n            }\n            return newWord;\n        })\n        .join(splitter);\n}\n\n/**\n * @param {String} key Key to format\n * @description Formats a key\n */\nexport function formatKey(key: string): string {\n    let newKey: string = key;\n\n    const replaceKeys = {\n        \" \": \"Space\"\n    }\n\n    if (replaceKeys[key]) {\n        newKey = replaceKeys[key];\n    }\n\n    return newKey;\n}"],
  "mappings": "yFAAA,YAIA,YAAY,UAAU,eAAiB,YACnC,KAAK,QAAU,GAAI,KACnB,KAAK,YAAc,EACnB,EAAY,UACR,EAAY,WAAa,KAAY,EAAY,UAAY,MAEjE,KAAK,gBAAkB,YACnB,MAAkB,MAAM,KAAK,KAAK,SAClC,KAAK,YAAY,SAAS,QAAQ,IAC9B,AACI,EAAY,KAAK,EAAY,WAAW,gBACxC,EACI,EAAQ,WACR,EAAY,WACd,eAEF,EAAQ,OAAO,KAAK,KAAM,EAAQ,eAK9C,KAAK,QAAU,IACX,QAAQ,IAAI,GACZ,KAAK,QAAQ,OAAO,EAAU,EAAM,MACpC,EAAI,4BAA6B,KAAK,UAG1C,KAAK,UAAY,IACb,KAAK,QAAQ,IAAI,EAAU,EAAM,MACjC,KAAK,gBAAgB,GACrB,EAAI,EAAM,KACV,EAAI,wBAAyB,KAAK,UAEtC,EAAI,sBAAuB,OAG/B,YAAY,UAAU,qBAAuB,WACzC,EAAI,MACJ,KAAK,YAAY,SAAW,IAIhC,EAAO,QAAU,CACb,kBC1CG,MAAM,EAAwB,CACjC,KAAQ,eAGL,cACH,YAAc,GACV,EAAO,GAAK,EAAO,GAEvB,EAAI,mBAAoB,GAGrB,QAAY,SACf,AAAI,EAAO,OAAS,eAChB,QAAQ,IAAI,GAAG,ICbhB,WAAuB,KAC1B,MAAO,GACF,MAAM,GACN,IAAI,IACD,MAAc,EACd,MAAI,GAAK,eAAiB,QACtB,GAAU,WAEd,AAAI,EAAK,eAAiB,SACtB,GAAU,SAEP,IAEV,KAAK,GAOP,cACH,MAAqB,EAErB,QAAoB,CAChB,IAAK,SAGT,MAAI,GAAY,IACZ,GAAS,EAAY,IAGlB",
  "names": []
}
