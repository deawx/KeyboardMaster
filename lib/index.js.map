{
  "version": 3,
  "sources": ["../src/index.ts", "../src/extend-lib.ts", "../src/utils.ts"],
  "sourcesContent": ["import { keyBindingArray } from \"./data-types\";\nimport { CONFIG, updateConfig, log } from './extend-lib';\nimport { formatBinding, formatKey } from \"./utils\";\n\nHTMLElement.prototype.addKeyBindings = function (keyBindings: keyBindingArray) {\n    this.pressed = new Set();\n    this.keyBindings = keyBindings;\n    keyBindings.seperator =\n        keyBindings.seperator != undefined ? keyBindings.seperator : \" + \";\n\n    this.checkKeyBinding = function (event) {\n        let pressedKeys = Array.from(this.pressed);\n        this.keyBindings.bindings.forEach((binding) => {\n            if (\n                pressedKeys.join(keyBindings.seperator).toLowerCase() ===\n                formatBinding(\n                    binding.keyBinding,\n                    keyBindings.seperator\n                ).toLowerCase()\n            ) {\n                binding.action.call(this, binding.keyBinding);\n            }\n        });\n    };\n\n    this.onkeyup = (event) => {\n        console.log(CONFIG);\n        this.pressed.delete(formatKey(event.key));\n        log('deleting key from storage', this.pressed);\n    };\n\n    this.onkeydown = (event) => {\n        this.pressed.add(formatKey(event.key));\n        this.checkKeyBinding(event);\n        log(event.key);\n        log('adding key to storage', this.pressed);\n    };\n    log(`bindings added for `, this);\n};\n\nHTMLElement.prototype.removeAllKeyBindings = function () {\n    log(this);\n    this.keyBindings.bindings = [];\n};\n\n// @ts-ignore\nmodule.exports = {\n    updateConfig\n}\n", "/*\n    This file contains the code \n*/\nimport { Configuration } from './data-types';\n\nexport const CONFIG: Configuration = {\n    \"mode\": \"development\"\n}\n\nexport function updateConfig(config: Configuration) {\n    for (let i in config) {\n        CONFIG[i] = config[i];\n    }\n    log('config update to', CONFIG);\n}\n\nexport const log = (...str) => {\n    if (CONFIG.mode === \"development\") {\n        console.log(...str);\n    }\n}", "/**\n * @param {String} keyBinding Keybinding to format\n * @param {String} splitter A piece of string which is used as the \"join string\".\n * @description Formats a keyBinding\n */\nexport function formatBinding(keyBinding: string, splitter: string): string {\n    return keyBinding\n        .split(splitter)\n        .map((word) => {\n            let newWord = word;\n            if (word.toLowerCase() == \"ctrl\") {\n                newWord = \"Control\";\n            }\n            if (word.toLowerCase() == \"shift\") {\n                newWord = \"Shift\";\n            }\n            return newWord;\n        })\n        .join(splitter);\n}\n\n/**\n * @param {String} key Key to format\n * @description Formats a key\n */\nexport function formatKey(key: string): string {\n    let newKey: string = key;\n\n    const replaceKeys = {\n        \" \": \"Space\"\n    }\n\n    if (replaceKeys[key]) {\n        newKey = replaceKeys[key];\n    }\n\n    return newKey;\n}"],
  "mappings": ";;;;;;;;;;AAAA,MAAA;AAIA,gBAAY,UAAU,iBAAiB;AACnC,WAAK,UAAU,IAAI;AACnB,WAAK,cAAc;AACnB,kBAAY,YACR,YAAY,aAAa,SAAY,YAAY,YAAY;AAEjE,WAAK,kBAAkB;AACnB,0BAAkB,MAAM,KAAK,KAAK;AAClC,aAAK,YAAY,SAAS,QAAQ;AAC9B,cACI,YAAY,KAAK,YAAY,WAAW,kBACxC,cACI,QAAQ,YACR,YAAY,WACd;AAEF,oBAAQ,OAAO,KAAK,MAAM,QAAQ;AAAA;AAAA;AAAA;AAK9C,WAAK,UAAU;AACX,gBAAQ,IAAI;AACZ,aAAK,QAAQ,OAAO,UAAU,MAAM;AACpC,YAAI,6BAA6B,KAAK;AAAA;AAG1C,WAAK,YAAY;AACb,aAAK,QAAQ,IAAI,UAAU,MAAM;AACjC,aAAK,gBAAgB;AACrB,YAAI,MAAM;AACV,YAAI,yBAAyB,KAAK;AAAA;AAEtC,UAAI,uBAAuB;AAAA;AAG/B,gBAAY,UAAU,uBAAuB;AACzC,UAAI;AACJ,WAAK,YAAY,WAAW;AAAA;AAIhC,WAAO,UAAU;AAAA,MACb;AAAA;AAAA;;;AC1CG,QAAM,SAAwB;AAAA,IACjC,MAAQ;AAAA;AAGL;AACH,kBAAc;AACV,aAAO,KAAK,OAAO;AAAA;AAEvB,QAAI,oBAAoB;AAAA;AAGrB,cAAY;AACf,QAAI,OAAO,SAAS;AAChB,cAAQ,IAAI,GAAG;AAAA;AAAA;;;ACbhB,yBAAuB;AAC1B,WAAO,WACF,MAAM,UACN,IAAI;AACD,oBAAc;AACd,UAAI,KAAK,iBAAiB;AACtB,kBAAU;AAAA;AAEd,UAAI,KAAK,iBAAiB;AACtB,kBAAU;AAAA;AAEd,aAAO;AAAA,OAEV,KAAK;AAAA;AAOP;AACH,iBAAqB;AAErB,wBAAoB;AAAA,MAChB,KAAK;AAAA;AAGT,QAAI,YAAY;AACZ,eAAS,YAAY;AAAA;AAGzB,WAAO;AAAA;",
  "names": []
}
