{
  "version": 3,
  "sources": ["../src/index.ts", "../src/extend-lib.ts", "../src/utils.ts"],
  "sourcesContent": ["import { keyBindingArray } from \"./data-types\"\nimport { updateConfig, log } from \"./extend-lib\"\nimport { formatBinding, formatKey } from \"./utils\"\n\nHTMLElement.prototype.addKeyBindings = function (keyBindings: keyBindingArray) {\n\tthis.pressed = new Set()\n\tthis.keyBindings = keyBindings\n\tkeyBindings.seperator =\n\t\tkeyBindings.seperator != undefined ? keyBindings.seperator : \" + \"\n\n\tthis.checkKeyBinding = function () {\n\t\tconst pressedKeys = Array.from(this.pressed)\n\t\tthis.keyBindings.bindings.forEach((binding) => {\n\t\t\tif (\n\t\t\t\tpressedKeys.join(keyBindings.seperator).toLowerCase() ===\n\t\t\t\tformatBinding(binding.keyBinding, keyBindings.seperator).toLowerCase()\n\t\t\t) {\n\t\t\t\tbinding.action.call(this, binding.keyBinding)\n\t\t\t}\n\t\t})\n\t}\n\n\tthis.onkeyup = (event) => {\n\t\tthis.pressed.delete(formatKey(event.key))\n\t\tlog(\"deleting key from storage\", this.pressed)\n\t}\n\n\tthis.onkeydown = (event) => {\n\t\tthis.pressed.add(formatKey(event.key))\n\t\tthis.checkKeyBinding(event)\n\t\tlog(event.key)\n\t\tlog(\"adding key to storage\", this.pressed)\n\t}\n\tlog(`bindings added for ${this}`)\n}\n\nHTMLElement.prototype.removeAllKeyBindings = function () {\n\tlog(this)\n\tthis.keyBindings.bindings = []\n}\nconsole.log(\"\")\n\nexport { updateConfig }\n", "import { Configuration } from \"./data-types\"\n\nexport const CONFIG: Configuration = {\n\tmode: \"development\",\n}\n\nexport function updateConfig(config: Configuration): void {\n\tfor (const i in config) {\n\t\tCONFIG[i] = config[i]\n\t}\n\tlog(\"config update to\", CONFIG)\n}\n\nexport const log = (...str: any[]): void => {\n\tif (CONFIG.mode === \"development\") {\n\t\tconsole.log(...str)\n\t}\n}\n", "/**\n * @param {String} keyBinding Keybinding to format\n * @param {String} splitter A piece of string which is used as the \"join string\".\n * @description Formats a keyBinding\n */\nexport function formatBinding(keyBinding: string, splitter: string): string {\n\treturn keyBinding\n\t\t.split(splitter)\n\t\t.map((word) => {\n\t\t\tlet newWord = word\n\t\t\tif (word.toLowerCase() == \"ctrl\") {\n\t\t\t\tnewWord = \"Control\"\n\t\t\t}\n\t\t\tif (word.toLowerCase() == \"shift\") {\n\t\t\t\tnewWord = \"Shift\"\n\t\t\t}\n\t\t\treturn newWord\n\t\t})\n\t\t.join(splitter)\n}\n\n/**\n * @param {String} key Key to format\n * @description Formats a key\n */\nexport function formatKey(key: string): string {\n\tlet newKey: string = key\n\n\tconst replaceKeys = {\n\t\t\" \": \"Space\",\n\t}\n\n\tif (replaceKeys[key]) {\n\t\tnewKey = replaceKeys[key]\n\t}\n\n\treturn newKey\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA,MAAA;AAAA;AAAA;AAAA;AAIA,gBAAY,UAAU,iBAAiB;AACtC,WAAK,UAAU,IAAI;AACnB,WAAK,cAAc;AACnB,kBAAY,YACX,YAAY,aAAa,SAAY,YAAY,YAAY;AAE9D,WAAK,kBAAkB;AACtB,4BAAoB,MAAM,KAAK,KAAK;AACpC,aAAK,YAAY,SAAS,QAAQ;AACjC,cACC,YAAY,KAAK,YAAY,WAAW,kBACxC,cAAc,QAAQ,YAAY,YAAY,WAAW;AAEzD,oBAAQ,OAAO,KAAK,MAAM,QAAQ;AAAA;AAAA;AAAA;AAKrC,WAAK,UAAU;AACd,aAAK,QAAQ,OAAO,UAAU,MAAM;AACpC,YAAI,6BAA6B,KAAK;AAAA;AAGvC,WAAK,YAAY;AAChB,aAAK,QAAQ,IAAI,UAAU,MAAM;AACjC,aAAK,gBAAgB;AACrB,YAAI,MAAM;AACV,YAAI,yBAAyB,KAAK;AAAA;AAEnC,UAAI,sBAAsB;AAAA;AAG3B,gBAAY,UAAU,uBAAuB;AAC5C,UAAI;AACJ,WAAK,YAAY,WAAW;AAAA;AAE7B,YAAQ,IAAI;AAAA;;;ACtCL,QAAM,SAAwB;AAAA,IACpC,MAAM;AAAA;AAGA;AACN,oBAAgB;AACf,aAAO,KAAK,OAAO;AAAA;AAEpB,QAAI,oBAAoB;AAAA;AAGlB,cAAY;AAClB,QAAI,OAAO,SAAS;AACnB,cAAQ,IAAI,GAAG;AAAA;AAAA;;;ACVV,yBAAuB;AAC7B,WAAO,WACL,MAAM,UACN,IAAI;AACJ,oBAAc;AACd,UAAI,KAAK,iBAAiB;AACzB,kBAAU;AAAA;AAEX,UAAI,KAAK,iBAAiB;AACzB,kBAAU;AAAA;AAEX,aAAO;AAAA,OAEP,KAAK;AAAA;AAOD;AACN,iBAAqB;AAErB,wBAAoB;AAAA,MACnB,KAAK;AAAA;AAGN,QAAI,YAAY;AACf,eAAS,YAAY;AAAA;AAGtB,WAAO;AAAA;",
  "names": []
}
