{
  "version": 3,
  "sources": ["../src/index.ts", "../src/extend-lib.ts", "../src/utils.ts"],
  "sourcesContent": ["import { keyBindingArray } from \"./data-types\"\nimport { updateConfig, log } from \"./extend-lib\"\nimport { formatBinding, formatKey } from \"./utils\"\n\nHTMLElement.prototype.addKeyBindings = function (keyBindings: keyBindingArray) {\n\tthis.pressed = new Set()\n\tthis.keyBindings = keyBindings\n\tkeyBindings.seperator =\n\t\tkeyBindings.seperator != undefined ? keyBindings.seperator : \" + \"\n\n\tthis.checkKeyBinding = function () {\n\t\tconst pressedKeys = Array.from(this.pressed)\n\t\tthis.keyBindings.bindings.forEach((binding) => {\n\t\t\tif (\n\t\t\t\tpressedKeys.join(keyBindings.seperator).toLowerCase() ===\n\t\t\t\tformatBinding(binding.keyBinding, keyBindings.seperator).toLowerCase()\n\t\t\t) {\n\t\t\t\tbinding.action.call(this, binding.keyBinding)\n\t\t\t}\n\t\t})\n\t}\n\n\tthis.onkeyup = (event) => {\n\t\tthis.pressed.delete(formatKey(event.key))\n\t\tlog(\"deleting key from storage\", this.pressed)\n\t}\n\n\tthis.onkeydown = (event) => {\n\t\tthis.pressed.add(formatKey(event.key))\n\t\tthis.checkKeyBinding(event)\n\t\tlog(event.key)\n\t\tlog(\"adding key to storage\", this.pressed)\n\t}\n\tlog(`bindings added for ${this}`)\n}\n\nHTMLElement.prototype.removeAllKeyBindings = function () {\n\tlog(this)\n\tthis.keyBindings.bindings = []\n}\n\nmodule.exports = {\n\tupdateConfig\n}\n", "import { Configuration } from \"./data-types\"\n\nexport const CONFIG: Configuration = {\n\tmode: \"development\",\n}\n\nexport function updateConfig(config: Configuration): void {\n\tfor (const i in config) {\n\t\tCONFIG[i] = config[i]\n\t}\n\tlog(\"config update to\", CONFIG)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const log = (...str: any[]): void => {\n\tif (CONFIG.mode === \"development\") {\n\t\tconsole.log(...str)\n\t}\n}\n", "/**\n * @param {String} keyBinding Keybinding to format\n * @param {String} splitter A piece of string which is used as the \"join string\".\n * @description Formats a keyBinding\n */\nexport function formatBinding(keyBinding: string, splitter: string): string {\n\treturn keyBinding\n\t\t.split(splitter)\n\t\t.map((word) => {\n\t\t\tlet newWord = word\n\t\t\tif (word.toLowerCase() == \"ctrl\") {\n\t\t\t\tnewWord = \"Control\"\n\t\t\t}\n\t\t\tif (word.toLowerCase() == \"shift\") {\n\t\t\t\tnewWord = \"Shift\"\n\t\t\t}\n\t\t\treturn newWord\n\t\t})\n\t\t.join(splitter)\n}\n\n/**\n * @param {String} key Key to format\n * @description Formats a key\n */\nexport function formatKey(key: string): string {\n\tlet newKey: string = key\n\n\tconst replaceKeys = {\n\t\t\" \": \"Space\"\n\t}\n\n\tif (replaceKeys[key]) {\n\t\tnewKey = replaceKeys[key]\n\t}\n\n\treturn newKey\n}\n"],
  "mappings": "yFAAA,YAIA,YAAY,UAAU,eAAiB,YACtC,KAAK,QAAU,GAAI,KACnB,KAAK,YAAc,EACnB,EAAY,UACX,EAAY,WAAa,KAAY,EAAY,UAAY,MAE9D,KAAK,gBAAkB,WACtB,QAAoB,MAAM,KAAK,KAAK,SACpC,KAAK,YAAY,SAAS,QAAQ,IACjC,AACC,EAAY,KAAK,EAAY,WAAW,gBACxC,EAAc,EAAQ,WAAY,EAAY,WAAW,eAEzD,EAAQ,OAAO,KAAK,KAAM,EAAQ,eAKrC,KAAK,QAAU,IACd,KAAK,QAAQ,OAAO,EAAU,EAAM,MACpC,EAAI,4BAA6B,KAAK,UAGvC,KAAK,UAAY,IAChB,KAAK,QAAQ,IAAI,EAAU,EAAM,MACjC,KAAK,gBAAgB,GACrB,EAAI,EAAM,KACV,EAAI,wBAAyB,KAAK,UAEnC,EAAI,sBAAsB,SAG3B,YAAY,UAAU,qBAAuB,WAC5C,EAAI,MACJ,KAAK,YAAY,SAAW,IAG7B,EAAO,QAAU,CAChB,kBCxCM,MAAM,EAAwB,CACpC,KAAM,eAGA,cACN,cAAgB,GACf,EAAO,GAAK,EAAO,GAEpB,EAAI,mBAAoB,GAIlB,QAAY,SAClB,AAAI,EAAO,OAAS,eACnB,QAAQ,IAAI,GAAG,ICXV,WAAuB,KAC7B,MAAO,GACL,MAAM,GACN,IAAI,IACJ,MAAc,EACd,MAAI,GAAK,eAAiB,QACzB,GAAU,WAEX,AAAI,EAAK,eAAiB,SACzB,GAAU,SAEJ,IAEP,KAAK,GAOD,cACN,MAAqB,EAErB,QAAoB,CACnB,IAAK,SAGN,MAAI,GAAY,IACf,GAAS,EAAY,IAGf",
  "names": []
}
